// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0
// source: convert.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClipServiceClient is the client API for ClipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClipServiceClient interface {
	GetImageVector(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*VectorResponse, error)
	GetTextVector(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*VectorResponse, error)
}

type clipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClipServiceClient(cc grpc.ClientConnInterface) ClipServiceClient {
	return &clipServiceClient{cc}
}

func (c *clipServiceClient) GetImageVector(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*VectorResponse, error) {
	out := new(VectorResponse)
	err := c.cc.Invoke(ctx, "/convert2vector.ClipService/GetImageVector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clipServiceClient) GetTextVector(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*VectorResponse, error) {
	out := new(VectorResponse)
	err := c.cc.Invoke(ctx, "/convert2vector.ClipService/GetTextVector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClipServiceServer is the server API for ClipService service.
// All implementations must embed UnimplementedClipServiceServer
// for forward compatibility
type ClipServiceServer interface {
	GetImageVector(context.Context, *ImageRequest) (*VectorResponse, error)
	GetTextVector(context.Context, *TextRequest) (*VectorResponse, error)
	mustEmbedUnimplementedClipServiceServer()
}

// UnimplementedClipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClipServiceServer struct {
}

func (UnimplementedClipServiceServer) GetImageVector(context.Context, *ImageRequest) (*VectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageVector not implemented")
}
func (UnimplementedClipServiceServer) GetTextVector(context.Context, *TextRequest) (*VectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTextVector not implemented")
}
func (UnimplementedClipServiceServer) mustEmbedUnimplementedClipServiceServer() {}

// UnsafeClipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClipServiceServer will
// result in compilation errors.
type UnsafeClipServiceServer interface {
	mustEmbedUnimplementedClipServiceServer()
}

func RegisterClipServiceServer(s grpc.ServiceRegistrar, srv ClipServiceServer) {
	s.RegisterService(&ClipService_ServiceDesc, srv)
}

func _ClipService_GetImageVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClipServiceServer).GetImageVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/convert2vector.ClipService/GetImageVector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClipServiceServer).GetImageVector(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClipService_GetTextVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClipServiceServer).GetTextVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/convert2vector.ClipService/GetTextVector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClipServiceServer).GetTextVector(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClipService_ServiceDesc is the grpc.ServiceDesc for ClipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "convert2vector.ClipService",
	HandlerType: (*ClipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetImageVector",
			Handler:    _ClipService_GetImageVector_Handler,
		},
		{
			MethodName: "GetTextVector",
			Handler:    _ClipService_GetTextVector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "convert.proto",
}
