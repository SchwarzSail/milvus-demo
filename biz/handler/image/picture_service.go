// Code generated by hertz generator.

package image

import (
	"context"
	"io"
	"milvus-demo/biz/pack"
	"milvus-demo/biz/service"
	"milvus-demo/internal/errno"
	"milvus-demo/internal/utils"

	"github.com/cloudwego/hertz/pkg/app"
	image "milvus-demo/biz/model/image"
)

// Insert .
// @router picture/insert [POST]
func Insert(ctx context.Context, c *app.RequestContext) {
	var err error
	var req image.InsertRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamErr)
		return
	}
	//获取图片数据
	data, err := c.FormFile("data")
	if err != nil {
		utils.LogrusObj.Fatal("FormFile err:", err)
		pack.RespError(c, errno.ParamErr)
		return
	}
	resp := new(image.InsertResponse)
	l := service.GetPictureService()
	image, err := l.Insert(ctx, data)
	if err != nil {
		utils.LogrusObj.Error("Insert failed")
		pack.RespError(c, err)
		return
	}
	resp.Image = pack.BuildImage(image)
	pack.RespData(c, resp)
}

// SearchByText .
// @router picture/search/text [GET]
func SearchByText(ctx context.Context, c *app.RequestContext) {
	var err error
	var req image.SearchByTextRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamErr)
		return
	}

	resp := new(image.SearchResponse)
	l := service.GetPictureService()
	list, err := l.SearchByText(ctx, req.Text)
	if err != nil {
		utils.LogrusObj.Error("SearchByText err:", err)
		pack.RespError(c, err)
		return
	}
	resp.Images = list
	pack.RespList(c, resp)
}

// SearchByImage .
// @router picture/search/image [GET]
func SearchByImage(ctx context.Context, c *app.RequestContext) {
	var err error
	var req image.SearchByImageRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamErr)
		return
	}
	file, err := c.FormFile("file")
	if err != nil {
		utils.LogrusObj.Fatal("FormFile err:", err)
		pack.RespError(c, errno.ParamErr)
		return
	}
	imageFile, err := file.Open()
	defer imageFile.Close()
	data, err := io.ReadAll(imageFile)
	if err != nil {
		utils.LogrusObj.Fatal("ReadAll err:", err)
		pack.RespError(c, errno.ReadFileErr)
		return
	}
	resp := new(image.SearchResponse)
	l := service.GetPictureService()
	list, err := l.SearchByImage(ctx, data)
	if err != nil {
		utils.LogrusObj.Error("SearchByImage err:", err)
		pack.RespError(c, err)
		return
	}
	resp.Images = list
	pack.RespList(c, resp)
}
